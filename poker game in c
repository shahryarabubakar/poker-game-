#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

struct Number {
    int num1, num2, sum, extraCard;
};

// function prototypes
void printCard1(int num1, int num2, int num3, int sum);
void printCard2(int num1, int num2, int sum);
int playAgain(char x, int money);
int winnerFunction(int bankerCard, int playerCard); // compares two cards
int declareWinner(int winner, int decision, int bet); // checks if user win or lose

int main() {
    srand(time(NULL)); // random number initialization

    // variable declaration
    char name[100];
    int bet, decision, winner, prize;
    char play;
    int logic = 1;
    int money = 10000;

    printf("==============================\n");
    printf("To Start, please enter your card\n");

    // name input
    printf("Enter your name: ");
    fgets(name, sizeof(name), stdin);
    name[strcspn(name, "\n")] = 0;

    printf("\nGood evening, %s\n", name);
    printf("==============================\n\n");
    printf("WELCOME TO VIRTUAL BACCARAT TABLE\n");
    printf("=================================\n");

    do { // main do-while loop

        printf("Current balance, PHP %d\n", money);
        printf("1-BANKER\n2-PLAYER\n");
        printf("Choose your bet: ");

        // Checks if input is 1 or 2
        while (scanf("%d", &decision) != 1 || (decision < 1 || decision > 2)) {
            while (getchar() != '\n'); // Clear input buffer
            printf("\nChoose your bet: ");
            printf("\n1-BANKER\n2-PLAYER\n");
        }

        do {
            // checks if bet is below balance money
            printf("Place your bet, PHP: ");
            scanf("%d", &bet);
        } while (bet > money);

        // BANKER CARDS
        printf("\n==============================\n");
        printf("      = BANKER'S CARD  =\n");
        printf("==============================\n");

        // Random card generator
        struct Number banker;
        banker.num1 = rand() % 10 + 1;
        banker.num2 = rand() % 10 + 1;
        banker.sum = (banker.num1 + banker.num2) % 10;

        // checks if card is natural win 8 or 9
        if (banker.sum != 9 && banker.sum != 8) {
            banker.extraCard = rand() % 10 + 1; // Third and extra card
            banker.sum = (banker.sum + banker.extraCard) % 10; // gets remainder of 3 cards as final card

            // prints banker's card
            printCard1(banker.num1, banker.num2, banker.extraCard, banker.sum);
        } else {
            // Natural win 8 or 9 and prints cards
            printCard2(banker.num1, banker.num2, banker.sum);
        }

        // PLAYER CARDS
        printf("\n==============================\n");
        printf("      = PLAYER'S CARD  =\n");
        printf("==============================\n");

        // random number generator for 2 cards
        struct Number player;
        player.num1 = rand() % 10 + 1;
        player.num2 = rand() % 10 + 1;
        player.sum = (player.num1 + player.num2) % 10;

        // checks if 2 cards are natural win 8 or 9
        if (player.sum != 9 && player.sum != 8) {
            player.extraCard = rand() % 10 + 1; // Third and extra card
            player.sum = (player.sum + player.extraCard) % 10; // gets remainder of 3 cards as final card

            // function to print card of players
            printCard1(player.num1, player.num2, player.extraCard, player.sum);
        } else {
            // natural win 8 or 9, print card of player
            printCard2(player.num1, player.num2, player.sum);
        }

        // declaration of winner
        winner = winnerFunction(banker.sum, player.sum);

        // awards prize for winner, 1:1 for winner;
        prize = declareWinner(winner, decision, bet);
        printf("PHP %d\n", prize);
        money += prize;
        printf("Current Money, PHP %d\n\n", money);

        // Asks the user if he wants to play again
        printf("PLAY AGAIN? Y/N ");
        scanf(" %c", &play);
        logic = playAgain(play, money);

    } while (logic);

    return 0;
}

void printCard1(int num1, int num2, int num3, int sum) {
    printf("=======\n");
    printf("|     |\n");
    printf("|  %d  |\n", sum);
    printf("|     |\n");
    printf("=======\n");

    printf("First Card %d\n", num1);
    printf("Second Card %d\n", num2);
    printf("Extra Card %d\n", num3);
}

void printCard2(int num1, int num2, int sum) {
    printf("=======\n");
    printf("|     |\n");
    printf("|  %d  |\n", sum);
    printf("|     |\n");
    printf("=======\n");

    printf("This is a natural win 8/9\n");
    printf("First Card %d\n", num1);
    printf("Second Card %d\n", num2);
}

int playAgain(char x, int money) {
    if (money > 0) {
        if (x == 'Y' || x == 'y') {
            return 1;
        } else if (x == 'N' || x == 'n') {
            printf("THANK YOU FOR PLAYING!\n");
            return 0;
        }
    } else {
        printf("Insufficient fund!\n");
        return 0;
    }
}

int winnerFunction(int bankerCard, int playerCard) {
    // function to determine nearest number to 9
    // returns 1,2,3 depending on condition met

    printf("\n==================================\n");
    if (bankerCard > playerCard) {
        printf("\nBANKER WIN\n");
        return 1;
    } else if (bankerCard < playerCard) {
        printf("\nPLAYER WIN\n");
        return 2;
    } else if (bankerCard == playerCard) {
        printf("\nDRAW\n");
        return 3;
    }
    return 0;
}

int declareWinner(int winner, int decision, int bet) {
    if (winner == decision) {
        printf("YOU WIN!\n");
        return bet;
    }
    if (winner == 3) {
        // draw
        printf("Tie Game!\n");
        return 0;
    }
    printf("YOU LOSE!\n");
    bet *= -1;
    return bet;
}
